{
  "_args": [
    [
      {
        "raw": "wordpress",
        "scope": null,
        "escapedName": "wordpress",
        "name": "wordpress",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/tylerhill/sippin"
    ]
  ],
  "_from": "wordpress@latest",
  "_id": "wordpress@1.4.1",
  "_inCache": true,
  "_location": "/wordpress",
  "_nodeVersion": "8.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/wordpress-1.4.1.tgz_1515619195623_0.011060845572501421"
  },
  "_npmUser": {
    "name": "scott.gonzalez",
    "email": "scott.gonzalez@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "wordpress",
    "scope": null,
    "escapedName": "wordpress",
    "name": "wordpress",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/wordpress/-/wordpress-1.4.1.tgz",
  "_shasum": "a4e73a6747bda1ff15b7c934917b3071cc2b406f",
  "_shrinkwrap": null,
  "_spec": "wordpress",
  "_where": "/Users/tylerhill/sippin",
  "author": {
    "name": "Scott Gonz√°lez",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "bugs": {
    "url": "https://github.com/scottgonzalez/node-wordpress/issues"
  },
  "dependencies": {
    "xmlrpc": "1.3.2"
  },
  "description": "A client for working with WordPress.",
  "devDependencies": {
    "jshint": "2.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-U2zADxCSyyYcpgc5i7ipiDzNx6/e0zq2ldWyqTqr8n88Nj+iHd5JT/WavZkIQ+x0b9QlBv9lHoXyrqxdbckIrw==",
    "shasum": "a4e73a6747bda1ff15b7c934917b3071cc2b406f",
    "tarball": "https://registry.npmjs.org/wordpress/-/wordpress-1.4.1.tgz"
  },
  "gitHead": "381d33c5786fc656e3b8a55c47118a4fb57b42e0",
  "homepage": "https://github.com/scottgonzalez/node-wordpress",
  "license": "MIT",
  "main": "lib/wordpress.js",
  "maintainers": [
    {
      "name": "scott.gonzalez",
      "email": "scott.gonzalez@gmail.com"
    }
  ],
  "name": "wordpress",
  "optionalDependencies": {},
  "readme": "# node-wordpress\n\nA node.js JavaScript client for working with WordPress.\n\nSupport this project by [donating on Gratipay](https://gratipay.com/scottgonzalez/).\n\nRequires WordPress 3.4 or newer (uses the [WordPress XML-RPC API](http://codex.wordpress.org/XML-RPC_WordPress_API)).\n\n\n\n## Installation\n\n```\nnpm install wordpress\n```\n\n\n\n## Usage\n\n```js\nvar wordpress = require( \"wordpress\" );\nvar client = wordpress.createClient({\n\turl: \"my-site.com\",\n\tusername: \"admin\",\n\tpassword: \"secret\"\n});\n\nclient.getPosts(function( error, posts ) {\n\tconsole.log( \"Found \" + posts.length + \" posts!\" );\n});\n```\n\nMore usage examples can be found in the `examples` directory.\n\n### Full Site Synchronization\n\nLooking for a way to manage your WordPress site without writing a bunch of code? Use [Gilded WordPress](https://github.com/scottgonzalez/gilded-wordpress) to easily synchronize your entire site from a local directory.\n\n\n\n## API\n\n*Note: In order to provide a slightly nicer API, the XML-RPC field names have been mapped to CamelCase names. In some cases, the names are also altered because the original names are awkward. See [the Fields section](#fields) for a list of fields by type.*\n\n### Client\n\n#### wordpress.createClient( settings )\n\nCreates a new client instance.\n\n* `settings`: A hash of settings that apply to all requests for the new client.\n  * `username`: The username for the WordPress account.\n  * `password`: The password for the WordPress account.\n  * `url`: The URL for the WordPress install.\n  * `host` (optional): The actual host to connect to if different from the URL, e.g., when deploying to a local server behind a firewall.\n  * `blogId` (optional; default: `0`): The blog ID for the WordPress install.\n  * `rejectUnauthorized` (optional; default: `true`): A boolean indicating whether Node.js should automatically reject clients with invalid certificates. See [tls.createSecurePair()](https://nodejs.org/api/tls.html#tls_tls_createsecurepair_context_isserver_requestcert_rejectunauthorized_options) in Node's documentation.\n  * `basicAuth` (optional): An object holding HTTP basic authentication credentials.\n    * `username`: The username for the HTTP basic auth.\n    * `password`: The password for the HTTP basic auth.\n\n#### wordpress.Client\n\nThe constructor used for client connections. Useful for creating extensions.\n\n### Posts\n\n#### client.getPost( id [, fields], callback )\n\nGets a post by ID.\n\n* `id`: The ID of the post to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, post )`): A callback to invoke when the API call is complete.\n  * `post`: An object containing the post data.\n\n#### client.getPosts( [filter] [, fields], callback )\n\nGets all posts, optionally filtered.\n\n* `filter` (optional): A hash of key/value pairs for filtering which posts to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, posts )`): A callback to invoke when the API call is complete.\n  * `posts`: An array containing the posts.\n\n#### client.newPost( data, callback )\n\nCreates a new post.\n\n* `data`: The data for the new post.\n* `callback` (`function( error, id )`): A callback to invoke when the API call is complete.\n  * `id`: The ID of the new post.\n\n#### client.editPost( id, data, callback )\n\nEdits an existing post.\n\n* `id`: The ID of the post to edit.\n* `data`: The data to update on the post.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.deletePost( id, callback )\n\nDeletes a post.\n\n*NOTE:* Deleting a post may move it to the trash and then deleting a second time will actually delete.\n\n* `id`: The ID of the post to delete.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.getPostType( name, [, fields], callback )\n\nGets a post type by name.\n\n* `name`: The name of the post type to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, postType )`): A callback to invoke when the API call is complete.\n  * `postType`: An object containing the post type data.\n\n#### client.getPostTypes( [filter], [, fields], callback )\n\nGets all post types.\n\n* `filter` (optional): A hash of key/value pairs for filtering which posts types to get.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, postTypes )`): A callback to invoke when the API call is complete.\n  * `postTypes`: An array containing the post types.\n\n### Taxonomies\n\n#### client.getTaxonomy( name, callback )\n\nGets a taxonomy by name.\n\n* `name`: The name of the taxonomy to get.\n* `callback` (`function( error, taxonomy )`): A callback to invoke when the API call is complete.\n  * `taxonomy`: An object containing the taxonomy data.\n\n#### client.getTaxonomies( callback )\n\nGets all taxonomies.\n\n* `callback` (`function( error, taxonomies )`): A callback to invoke when the API call is complete.\n  * `taxonomies`: An array containing the taxonomies.\n\n#### client.getTerm( taxonomy, id, callback )\n\nGets a taxonomy term by ID.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `id`: The ID of the term to get.\n* `callback` (`function( error, term )`): A callback to invoke when the API call is complete.\n  * `term`: An object containing the taxonomy term data.\n\n#### client.getTerms( taxonomy [, fields], callback )\n\nGets all taxonomy terms.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `fields` (optional): An array of fields to return.\n* `callback` (`function( error, terms )`): A callback to invoke when the API call is complete.\n  * `terms`: An array containing the taxonomy terms.\n\n#### client.newTerm( data, callback )\n\nCreates a new taxonomy term.\n\n* `data`: The data for the new taxonomy term.\n* `callback` (`function( error, id )`): A callback to invoke when the API call is complete.\n  * `id`: The ID of the new taxonomy term.\n\n#### client.editTerm( id, data, callback )\n\nEdits an existing taxonomy term.\n\n* `id`: The ID of the taxonomy term to edit.\n* `data`: The data to update on the taxonomy.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n#### client.deleteTerm( taxonomy, id, callback )\n\nDeletes a taxonomy term.\n\n* `taxonomy`: The name fo the taxonomy the term belongs to.\n* `id`: The ID of the taxonomy term to delete.\n* `callback` (`function( error )`): A callback to invoke when the API call is complete.\n\n### Media\n\n#### client.getMediaItem( id, callback )\n\nGets a piece of media by ID.\n\n* `id`: The ID of the piece of media to get.\n* `callback` (`function( error, media )` ): A callback to invoke when the API call is complete.\n\n#### client.getMediaLibrary( [filter], callback )\n\n* `filter` (optional): A hash of key/value pairs for filtering which posts to get.\n* `callback` (`function( error, media )` ): A callback to invoke when the API call is complete.\n\n#### client.uploadFile( data, callback )\n\nUploads a file to Wordpress.\n\n* `data`: The data for the file to upload.\n  * `name`: The filename.\n  * `type`: The file MIME type, e.g `img/jpg`.\n  * `bits`: Binary data.\n  * `overwrite` (optional): Whether this file should overwrite any existing file of the same name.\n  * `postId` (optional): Which post to assign the attachment to.\n* `callback` (`function( error, file )`): A callback to invoke when the API call is complete.\n  * `file`: An object containing the file data.\n\n### Utilities\n\n#### client.listMethods( callback )\n\nGets a list of all avaialble methods.\n\n* `callback` (`function( error, methods )`): A callback to invoke when the API call is complete.\n  * `methods`: An array of methods.\n\n#### client.call( method [, args... ], callback )\n\nInvokes a method.\n\n* `method`: The method to call.\n* `args` (optional): Arguments to pass to the method.\n* `callback` (`function( error [, data] )`): A callback to invoke when the API call is complete.\n  * `data`: Data returned by the method.\n\n#### client.authenticatedCall( method [, args... ], callback )\n\nInvokes a method with the username and password provided by the client.\n\n* `method`: The method to call.\n* `args` (optional): Arguments to pass to the method.\n* `callback` (`function( error [, data] )`): A callback to invoke when the API call is complete.\n* `data`: Data returned by the method.\n\n### Fields\n\n#### Files\n\n* name\n* type\n* bits\n* overwrite\n* postId\n\n#### Labels\n\n* addNewItem\n* addOrRemoveItems\n* allItems\n* chooseFromMostUsed\n* editItem\n* menuName\n* name\n* nameAdminBar\n* newItemName\n* parentItem\n* parentItemColon\n* popularItems\n* searchItems\n* separateItemsWithCommas\n* singularName\n* updateItem\n* viewItem\n\n#### Posts\n\n* author\n* commentStatus\n* content\n* customFields\n* date\n* excerpt\n* format\n* id\n* link\n* modified\n* menuOrder\n* name\n* pageTemplate\n* parent\n* password\n* pingStatus\n* status\n* sticky\n* terms\n* termNames\n* thumbnail\n* title\n* type\n\n#### Post Types\n\n* cap\n* capabilityType\n* description\n* _editLink\n* excludeFromSearch\n* hasArchive\n* hierarchical\n* label\n* labels\n* mapMetaCap\n* menuIcon\n* menuPosition\n* name\n* \"public\n* publiclyQuerably\n* queryVar\n* rewrite\n* showInAdminBar\n* showInMenu\n* showInNavMenus\n* showUi\n* supports\n* taxonomies\n\n#### Post Type Capabilities\n\n* deleteOthersPosts\n* deletePost\n* deletePosts\n* deletePrivatePosts\n* deletePublishedPosts\n* editOthersPosts\n* editPost\n* editPosts\n* editPrivatePosts\n* editPublishedPosts\n* publishPosts\n* read\n* readPost\n* readPrivatePosts\n\n#### Taxonomies\n\n* cap\n* hierarchical\n* name\n* label\n* labels\n* objectType\n* public\n* queryVar\n* rewrite\n* showInNavMenus\n* showTagCloud\n* showUi\n\n#### Taxanomy Capabilities\n\n* assignTerms\n* deleteTerms\n* editTerms\n* manageTerms\n\n#### Terms\n\n* count\n* description\n* name\n* parent\n* slug\n* taxonomy\n* termId\n* termTaxonomyId\n\n#### Media\n\n* attachmentId\n* caption\n* date\n* description\n* link\n* metadata\n  * file\n  * height\n  * imageMeta\n    * aperture\n    * camera\n    * caption\n    * copyright\n    * createdTimestamp\n    * credit\n    * focalLength\n    * iso\n    * keywords\n    * orientation\n    * shutterSpeed\n    * title\n  * sizes\n    * file\n    * height\n    * mimeType\n    * width\n  * width\n* parent\n* thumbnail\n* title\n* type\n\n\n\n\n## License\n\nCopyright Scott Gonz√°lez. Released under the terms of the MIT license.\n\n---\n\nSupport this project by [donating on Gratipay](https://gratipay.com/scottgonzalez/).\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/node-wordpress.git"
  },
  "scripts": {
    "test": "jshint lib/*"
  },
  "version": "1.4.1"
}
